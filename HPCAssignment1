#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define MAX_NODES 100
#define TRUE 1
#define FALSE 0

typedef struct {
    int numNodes;
    int adjMatrix[MAX_NODES][MAX_NODES];
} Graph;

void initGraph(Graph *graph, int numNodes) {
    graph->numNodes = numNodes;
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            graph->adjMatrix[i][j] = FALSE;
        }
    }
}

void addEdge(Graph *graph, int src, int dest) {
    graph->adjMatrix[src][dest] = TRUE;
    graph->adjMatrix[dest][src] = TRUE;
}

void bfs(Graph *graph, int startNode) {
    int visited[MAX_NODES] = {FALSE};
    int queue[MAX_NODES];
    int front = 0, rear = 0;

    #pragma omp parallel
    {
        #pragma omp single
        {
            queue[rear++] = startNode;
            visited[startNode] = TRUE;
        }

        while (front < rear) {
            int currentNode;
            #pragma omp critical
            {
                currentNode = queue[front++];
            }

            printf("%d ", currentNode);

            #pragma omp parallel for
            for (int i = 0; i < graph->numNodes; i++) {
                if (graph->adjMatrix[currentNode][i] && !visited[i]) {
                    #pragma omp critical
                    {
                        queue[rear++] = i;
                        visited[i] = TRUE;
                    }
                }
            }
        }
    }
}

void dfsUtil(Graph *graph, int currentNode, int visited[]) {
    printf("%d ", currentNode);
    visited[currentNode] = TRUE;

    #pragma omp parallel for
    for (int i = 0; i < graph->numNodes; i++) {
        if (graph->adjMatrix[currentNode][i] && !visited[i]) {
            dfsUtil(graph, i, visited);
        }
    }
}

void dfs(Graph *graph, int startNode) {
    int visited[MAX_NODES] = {FALSE};
    dfsUtil(graph, startNode, visited);
}

int main() {
    Graph graph;
    int numNodes = 6;
    initGraph(&graph, numNodes);

    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 1, 4);
    addEdge(&graph, 2, 4);
    addEdge(&graph, 3, 5);
    addEdge(&graph, 4, 5);

    printf("BFS Traversal: ");
    bfs(&graph, 0);
    printf("\n");

    printf("DFS Traversal: ");
    dfs(&graph, 0);
    printf("\n");

    return 0;
}
